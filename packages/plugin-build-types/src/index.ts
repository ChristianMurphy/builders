import path from "path";
import fs from "fs";
import mkdirp from "mkdirp";
import execa from "execa";
import { BuilderOptions, MessageError } from "@pika/types";

export function manifest(manifest) {
  manifest.types = manifest.types || "dist-types/index.d.ts";
}

function getTsConfigPath(options, cwd) {
    if (!options || !options.tsconfig) {
        return path.join(cwd, "tsconfig.json");
    }

    const tsConfigPath = path.join(cwd, options.tsconfig);

    if (!fs.existsSync(tsConfigPath)) {
        throw new MessageError(`"tsconfig" is set, but not found. Make sure "${path.resolve(tsConfigPath)}" is exists.`);
    }

    return tsConfigPath;
}

export async function build({
  cwd,
  out,
  options,
  reporter
}: BuilderOptions): Promise<void> {
  await (async () => {
    const tscBin = path.join(cwd, "node_modules/.bin/tsc");
    const writeToTypings = path.join(out, "dist-types/index.d.ts");
    const importAsNode = path.join(out, "dist-node", "index.js");

    if (fs.existsSync(path.join(cwd, "index.d.ts"))) {
      mkdirp.sync(path.dirname(writeToTypings));
      fs.copyFileSync(path.join(cwd, "index.d.ts"), writeToTypings);
      return;
    }
    if (fs.existsSync(path.join(cwd, "src", "index.d.ts"))) {
      mkdirp.sync(path.dirname(writeToTypings));
      fs.copyFileSync(path.join(cwd, "src", "index.d.ts"), writeToTypings);
      return;
    }

    const tsConfigPath = getTsConfigPath(options, cwd);

    if (
      fs.existsSync(tscBin) &&
      fs.existsSync(tsConfigPath)
    ) {
      await execa(
        tscBin,
        [
          "-d",
          "--emitDeclarationOnly",
          "--declarationMap",
          "false",
          "--declarationDir",
          "--project",
          tsConfigPath,
          path.join(out, "dist-types/")
        ],
        { cwd }
      );
      return;
    }

    // !!! Still experimental:
    // const dtTypesDependency = path.join(
    //   cwd,
    //   "node_modules",
    //   "@types",
    //   manifest.name
    // );
    // const dtTypesExist = fs.existsSync(dtTypesDependency);
    // if (dtTypesExist) {
    //   fs.copyFileSync(dtTypesDependency, writeToTypings);
    //   return;
    // }

    // log: we're auto-generating types now
    reporter.info('no type definitions found, auto-generating...');
    const tsc = await import("typescript");
    if (tsc && tsc.generateTypesForModule) {
      const nodeImport = await import(importAsNode);
      const guessedTypes = tsc.generateTypesForModule(
        "AutoGeneratedTypings",
        nodeImport,
        {}
      );
      mkdirp.sync(path.dirname(writeToTypings));
      fs.writeFileSync(writeToTypings, guessedTypes);
      return;
    }

    console.error(`
⚠️  dist-types/: Attempted to generate type definitions, but "typescript" package was not found.
                Please install either locally or globally and try again.
       $ pika add --dev typescript
[alt.] $ pika global add typescript
[alt.] *   Write your own type definition file to "index.d.ts"
`);
    throw new Error(`Failed to build: dist-types/`);
  })();

  reporter.created(path.join(out, "dist-types", "index.d.ts"), 'types');
}
